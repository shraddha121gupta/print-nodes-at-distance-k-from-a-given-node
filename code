#include <bits/stdc++.h>
using namespace std;
 // A binary Tree node
struct node
{
    int data;
    struct node *left, *right;
};
node *newnode(int data)
{
    node *temp = new node;
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}
 vector<int> ans; //for storing nodes

void solve(node *root, int k)
{
   if(root==NULL || k<0)
     return ;
    if(k==0)   
    {
    ans.push_back(root->data);
    return;
    }
    
    solve(root->left,k-1);
    solve(root->right,k-1);
}
 

int print(node* root,node* target,int k)
{
   if(root==NULL)
    return -1;
    
    if(root==target)
       {
             solve(root,k);
             return 0;
       }
    
    int l=print(root->left,target,k);
    if(l!=-1)
    {
        if(l+1==k)
        {
           ans.push_back(root->data);
        }
        else
        {
            solve(root->right,k-l-2);
        }
        return l+1;
    }
    int r=print(root->right,target,k);
    if(r!=-1)
    {
        if(r+1==k)
        {
            ans.push_back(root->data);
        }
        else
        {
           solve(root->left,k-r-2);
        }
        return r+1;
    }
    return -1;
}
 
// main function
int main()
{
    /* Let's construct the tree that are given in pdf */
    node * root = newnode(20);
    root->left = newnode(8);
    root->right = newnode(22);
    root->left->left = newnode(4);
    root->left->right = newnode(12);
    root->left->right->left = newnode(10);
    root->left->right->right = newnode(14);
    node * target = root->left->right;
    print(root, target, 1);
    for( int i = 0;i< ans.size();i++)
      cout<<ans[i]<<" "<<;
    return 0;
}
